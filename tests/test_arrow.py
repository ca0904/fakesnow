# ruff: noqa: E501

from base64 import b64decode

import pandas as pd
import pyarrow as pa

from fakesnow.arrow import to_ipc, with_sf_metadata
from fakesnow.types import ColumnInfo, describe_as_rowtype


def rowtype(types: list[str]) -> list[ColumnInfo]:
    return describe_as_rowtype([("test", typ, None, None, None, None) for typ in types])


def test_with_sf_metadata() -> None:
    # see https://arrow.apache.org/docs/python/api/datatypes.html
    def f(t: pa.DataType, rowtype: list[ColumnInfo]) -> dict:
        return with_sf_metadata(pa.schema([pa.field(str(t), t)]), rowtype).field(0).metadata

    assert f(pa.string(), rowtype(["VARCHAR"])) == {
        b"logicalType": b"TEXT",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"16777216",
    }
    assert f(pa.decimal128(10, 2), rowtype(["DECIMAL(10,2)"])) == {
        b"logicalType": b"FIXED",
        b"precision": b"10",
        b"scale": b"2",
        b"charLength": b"0",
    }


def test_ipc_writes_sf_metadata() -> None:
    df = pd.DataFrame.from_dict(
        {
            "'HELLO WORLD'": ["hello world"],
        }
    )

    table = pa.Table.from_pandas(df)
    table_bytes = to_ipc(table, rowtype(["VARCHAR"]))

    batch = next(iter(pa.ipc.open_stream(table_bytes)))

    # field and schema metadata is ignored
    assert pa.table(batch) == table
    assert batch.schema.field(0).metadata == {
        b"logicalType": b"TEXT",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"16777216",
    }


def test_read_base64_from_actual_snowflake_result() -> None:
    # select
    #   true, 1::int, 2.0::float, to_decimal('12.3456', 10,2), 'hello', 'hello'::varchar(20),
    #   to_date('2018-04-15'), to_time('04:15:29'), to_timestamp_tz('2013-04-05 01:02:03'), to_timestamp_ntz('2013-04-05 01:02:03'),
    #   X'41424320E29D84', ARRAY_CONSTRUCT('foo'), OBJECT_CONSTRUCT('k','v1'), 'vary'::VARIANT
    rowset_b64 = ""
    f = b64decode(rowset_b64)
    reader = pa.ipc.open_stream(f)

    batch = next(reader)

    field = batch.schema.field(0)
    assert field == pa.field(name="TRUE", type=pa.bool_())
    assert field.metadata == {
        b"logicalType": b"BOOLEAN",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"0",
        b"byteLength": b"1",
        b"finalType": b"T",
    }

    field = batch.schema.field(1)
    assert field == pa.field(name="1::INT", type=pa.int8(), nullable=False)
    assert field.metadata == {
        b"logicalType": b"FIXED",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"0",
        b"byteLength": b"1",
        b"finalType": b"T",
    }

    field = batch.schema.field(2)
    assert field == pa.field(name="2.0::FLOAT", type=pa.float64(), nullable=False)
    assert field.metadata == {
        b"logicalType": b"REAL",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"0",
        b"byteLength": b"8",
        b"finalType": b"T",
    }

    field = batch.schema.field(3)
    assert field == pa.field(name="TO_DECIMAL('12.3456', 10,2)", type=pa.int16(), nullable=False)
    assert field.metadata == {
        b"logicalType": b"FIXED",
        b"precision": b"10",
        b"scale": b"2",
        b"charLength": b"0",
        b"byteLength": b"2",
        b"finalType": b"T",
    }

    field = batch.schema.field(4)
    assert field == pa.field(name="'HELLO'", type=pa.string(), nullable=False)
    assert field.metadata == {
        b"logicalType": b"TEXT",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"5",
        b"byteLength": b"20",
        b"finalType": b"T",
    }

    field = batch.schema.field(5)
    assert field == pa.field(name="'HELLO'::VARCHAR(20)", type=pa.string(), nullable=False)
    assert field.metadata == {
        b"logicalType": b"TEXT",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"20",
        b"byteLength": b"80",
        b"finalType": b"T",
    }

    field = batch.schema.field(6)
    assert field == pa.field(name="TO_DATE('2018-04-15')", type=pa.date32(), nullable=False)
    assert field.metadata == {
        b"logicalType": b"DATE",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"0",
        b"byteLength": b"4",
        b"finalType": b"T",
    }

    field = batch.schema.field(7)
    assert field == pa.field(name="TO_TIME('04:15:29')", type=pa.int64(), nullable=False)
    assert field.metadata == {
        b"logicalType": b"TIME",
        b"precision": b"0",
        b"scale": b"9",
        b"charLength": b"0",
        b"byteLength": b"8",
        b"finalType": b"T",
    }

    field = batch.schema.field(8)
    assert field == pa.field(
        name="TO_TIMESTAMP_TZ('2013-04-05 01:02:03')",
        type=pa.struct(
            [
                pa.field("epoch", pa.int64(), nullable=False),
                pa.field("fraction", pa.int32(), nullable=False),
                pa.field("timezone", pa.int32(), nullable=False),
            ]
        ),
        nullable=False,
    )
    assert field.metadata == {
        b"logicalType": b"TIMESTAMP_TZ",
        b"precision": b"0",
        b"scale": b"9",
        b"charLength": b"0",
        b"byteLength": b"16",
        b"finalType": b"T",
    }

    field = batch.schema.field(9)
    assert field == pa.field(
        name="TO_TIMESTAMP_NTZ('2013-04-05 01:02:03')",
        type=pa.struct(
            [pa.field("epoch", pa.int64(), nullable=False), pa.field("fraction", pa.int32(), nullable=False)]
        ),
        nullable=False,
    )
    assert field.metadata == {
        b"logicalType": b"TIMESTAMP_NTZ",
        b"precision": b"0",
        b"scale": b"9",
        b"charLength": b"0",
        b"byteLength": b"16",
        b"finalType": b"T",
    }

    field = batch.schema.field(10)
    assert field == pa.field(
        name="X'41424320E29D84'",
        type=pa.binary(),
        nullable=False,
    )
    assert field.metadata == {
        b"logicalType": b"BINARY",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"7",
        b"byteLength": b"7",
        b"finalType": b"T",
    }

    field = batch.schema.field(11)
    assert field == pa.field(name="ARRAY_CONSTRUCT('FOO')", type=pa.string())
    assert field.metadata == {
        b"logicalType": b"ARRAY",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"16777216",
        b"byteLength": b"16777216",
        b"finalType": b"T",
    }

    field = batch.schema.field(12)
    assert field == pa.field(name="OBJECT_CONSTRUCT('K','V1')", type=pa.string())
    assert field.metadata == {
        b"logicalType": b"OBJECT",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"16777216",
        b"byteLength": b"16777216",
        b"finalType": b"T",
    }

    field = batch.schema.field(13)
    assert field == pa.field(
        name="'VARY'::VARIANT",
        type=pa.string(),
        nullable=False,
    )
    assert field.metadata == {
        b"logicalType": b"VARIANT",
        b"precision": b"38",
        b"scale": b"0",
        b"charLength": b"16777216",
        b"byteLength": b"16777216",
        b"finalType": b"T",
    }
